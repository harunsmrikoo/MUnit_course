<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="4.munit-assert-test-suite.xml" />
	<munit:test name="payloadJSONExpectedSuccessTestCase" doc:id="ab048eb9-998a-4833-b9b8-7e184c83633c" description="Test">
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="d1b797a8-9424-4127-ab13-475b09cdd733" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - Payload is Expected" doc:id="c96eef3d-5d9f-48ad-8368-a34a7b72de3c" is="#[MunitTools::equalTo(readUrl('classpath://payloadResponse.json','application/json'))]" message='#["The response payload is incorrect"]' expression="#[%dw 2.0&#10;&#10;output application/json&#10;---&#10;payload]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="categoryMatchSuccessTestCase" doc:id="217f721d-3c03-4a03-a747-08d011811f97" >
		<munit:behavior >
			<set-variable value="#[['obstetric', 'breast pain', 'dermatology', 'gynaecology'] as Array]" doc:name="Set Variable - medical Categories" doc:id="039520d6-ddec-4366-87f6-ebc107155ac0" variableName="medicalCategories"/>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="7e6db404-0f10-4e68-8303-f3e535744d31" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression - medical category exists" doc:id="f4dfb437-40be-4e61-9cfa-45eba0a04aac" message='#["The medical category in the payload does not exist"]'>
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload.category must beOneOf(vars.medicalCategories)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="feeValueSuccessTestCase" doc:id="3466c4cf-656a-4036-b8be-a6613d9d96e0" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="cd337f20-af0b-496a-8c01-58d428b6405c" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - fee exists and is greater than or equal to 100" doc:id="23200547-a209-47ce-8639-f37fc04820e1" message='#["The medical fee is not valid"]' expression="#[payload.fee]" is="#[MunitTools::both(MunitTools::notNullValue(), MunitTools::greaterThanOrEqualTo(100))]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="payloadMediaTypeSuccessTestCase" doc:id="a3e48dbc-bfa7-413b-a120-af451d01862c" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="8ccd9609-d6c6-4699-8c5e-4e71a9d06a67" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - payload media type is JSON" doc:id="839e3db3-e7af-46f0-bc11-e00d006309d7" message='#["The media type of the response payload is incorrect"]' expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]"/>
		</munit:validation>
	</munit:test>


</mule>
